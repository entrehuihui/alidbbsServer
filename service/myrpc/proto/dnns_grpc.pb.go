// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: dnns.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dnns_DnnsPost_FullMethodName = "/proto.Dnns/dnnsPost"
	Dnns_DnnsGet_FullMethodName  = "/proto.Dnns/dnnsGet"
)

// DnnsClient is the client API for Dnns service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DnnsClient interface {
	// 修改DNS
	DnnsPost(ctx context.Context, in *DnnsPostReq, opts ...grpc.CallOption) (*DnnsPostResp, error)
	// 获取公网IP
	DnnsGet(ctx context.Context, in *DnnsGetReq, opts ...grpc.CallOption) (*DnnsGetResp, error)
}

type dnnsClient struct {
	cc grpc.ClientConnInterface
}

func NewDnnsClient(cc grpc.ClientConnInterface) DnnsClient {
	return &dnnsClient{cc}
}

func (c *dnnsClient) DnnsPost(ctx context.Context, in *DnnsPostReq, opts ...grpc.CallOption) (*DnnsPostResp, error) {
	out := new(DnnsPostResp)
	err := c.cc.Invoke(ctx, Dnns_DnnsPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnnsClient) DnnsGet(ctx context.Context, in *DnnsGetReq, opts ...grpc.CallOption) (*DnnsGetResp, error) {
	out := new(DnnsGetResp)
	err := c.cc.Invoke(ctx, Dnns_DnnsGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DnnsServer is the server API for Dnns service.
// All implementations must embed UnimplementedDnnsServer
// for forward compatibility
type DnnsServer interface {
	// 修改DNS
	DnnsPost(context.Context, *DnnsPostReq) (*DnnsPostResp, error)
	// 获取公网IP
	DnnsGet(context.Context, *DnnsGetReq) (*DnnsGetResp, error)
	mustEmbedUnimplementedDnnsServer()
}

// UnimplementedDnnsServer must be embedded to have forward compatible implementations.
type UnimplementedDnnsServer struct {
}

func (UnimplementedDnnsServer) DnnsPost(context.Context, *DnnsPostReq) (*DnnsPostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DnnsPost not implemented")
}
func (UnimplementedDnnsServer) DnnsGet(context.Context, *DnnsGetReq) (*DnnsGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DnnsGet not implemented")
}
func (UnimplementedDnnsServer) mustEmbedUnimplementedDnnsServer() {}

// UnsafeDnnsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DnnsServer will
// result in compilation errors.
type UnsafeDnnsServer interface {
	mustEmbedUnimplementedDnnsServer()
}

func RegisterDnnsServer(s grpc.ServiceRegistrar, srv DnnsServer) {
	s.RegisterService(&Dnns_ServiceDesc, srv)
}

func _Dnns_DnnsPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DnnsPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnnsServer).DnnsPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dnns_DnnsPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnnsServer).DnnsPost(ctx, req.(*DnnsPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dnns_DnnsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DnnsGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnnsServer).DnnsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dnns_DnnsGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnnsServer).DnnsGet(ctx, req.(*DnnsGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Dnns_ServiceDesc is the grpc.ServiceDesc for Dnns service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dnns_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Dnns",
	HandlerType: (*DnnsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "dnnsPost",
			Handler:    _Dnns_DnnsPost_Handler,
		},
		{
			MethodName: "dnnsGet",
			Handler:    _Dnns_DnnsGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dnns.proto",
}
